# Accumulator plugin for VIM. Commands like "vim ~/.zshrc" are
# routed to specified generator function. The generator creates
# text with hyperlinks and appends the text to $SECTIONNAME of
# choice in ZACCU_OUTPUT_DOCUMENT_SECTIONS[$SECTIONNAME] (global
# hash). Initial and final generators manage header text.

# Plugin functions are run from "accumulator" function, which has
# emulate -LR zsh, setopt extendedglob. Other code is executed
# in unknown environment

# This is implementation file - there's no registration here

#
# Initial generator
#

# No arguments
__accu_initial_generator_emacs1() {
    ZACCU_OUTPUT_DOCUMENT_SECTIONS[emacs1]=$'\n'"${ACC_GREEN}EMACS LAST DOCUMENTS:${ACC_GREEN_E}"$'\n'
    __accu_emacs1_was_content=0

    #
    # Read configuration
    #

    # Size

    local size
    zstyle -s ":accumulator:emacs1" size size || size="20"

    # We run from accumulator, extendedglob is set
    # <-> is: positive number, including 0
    [[ "$size" != <-> ]] && size="20"

    ZACCU_CONFIG[emacs1_size]="$size"

    # Backup dir

    local backup_dir
    zstyle -s ":accumulator:emacs1" backup_dir backup_dir || backup_dir="~/.backup"
    ZACCU_CONFIG[emacs1_backupdir]="$backup_dir"
}


#
# Generator
#

# $1 - present working directory
# $2 - it's "vim" or "gvim", the command that's invoked
# $3, $4, ... - arguments passed to vim
__accu_generator_emacs1() {
    local ts="$1" active_path="$2" convey_id="$3" convey_name="$4" cmd="$5"
    local -a args
    shift 5
    args=( "$@" )

    integer max_entries="${ZACCU_CONFIG[emacs1_size]}" finished=0

    local a
    for a in "${args[@]}"; do
        # Skip options
        [[ "$a" = -[[:alnum:]]# || "$a" = --[[:alnum:]]# || "$a" = +[[:alnum:]]# ]] && continue

        if [ "$__accu_emacs1_path_occured[$a]" != "1" ]; then
            __accu_emacs1_was_content=1
            __accu_emacs1_path_occured[$a]="1"

            # Configurable limit on number of entries in the section
            [[ "$__accu_emacs1_count" -ge "$max_entries" ]] && finished=1 && break
            __accu_emacs1_count=__accu_emacs1_count+1

            # Dequote $active_path and $a that come from input with quoting
            # The quoting is needed for pasting at command line that's why
            # we then again manually quote (the (q) flags)
            zaccu_stdlib_resolve_path "${(Q)active_path}" "${(Q)a}"
            local dir="${(q)reply[1]}" file="${(q)reply[2]}"

            # Truncate to 35 characters, right-pad to 40 characters
            # Quoting is kept so that (z) flags will correctly split
            # (in the selection list, things there are done via z flag)
            #
            # Also, quote % so that prompt expansion doesn't interfere
            local txtfile="${file//\%/%%}"
            txtfile='%35<...<'"$txtfile"
            txtfile="$ACC_YELLOW${(%)txtfile}$ACC_YELLOW_E"
            txtfile="${(r:40:: :)txtfile}"

            reply=()

            # ID, data1, data2, data3, data4, text, handler
            zaccu_get_std_button "emacs1" 0 "$cmd" "$active_path" "$a" "$txtfile" __accu_std_action_emacs1

            # ID, data1, data2, data3, data4, text, handler
            zaccu_get_button "emacs1A" 0 "$cmd" "$active_path" "$a" "CD" __accu_action_cd_emacs1
            zaccu_get_button "emacs1B" 0 "$cmd" "$active_path" "$a" "Backup" __accu_action_backup_emacs1

            if [[ "${a[1]}" = "/" || "${a[1]}" = "~" ]]; then
                zaccu_get_button "emacs1C" 0 "$cmd" "$dir" "$file" "FileCD" __accu_action_cd_emacs1
                reply[4]=" ${reply[4]}"
            elif [[ "$a" = */* ]]; then
                zaccu_get_button "emacs1C" 0 "$cmd" "$dir" "$file" "FileCD" __accu_action_cd_emacs1
                reply[4]=" ${reply[4]}"
            else
                reply[4]=""
            fi

            ZACCU_OUTPUT_DOCUMENT_SECTIONS[emacs1]+=$'\t'"${reply[1]} ${reply[2]} ${reply[3]}${reply[4]}"$'\n'
        fi
    done

    # finished -> 0 (shell true)
    return $(( 1-finished ))
}


#
# Final generator
#

__accu_final_generator_emacs1() {
    __accu_emacs1_path_occured=()
    __accu_emacs1_count=0

    # No content -> remove header
    if (( __accu_emacs1_was_content == 0 )); then
        unset 'ZACCU_OUTPUT_DOCUMENT_SECTIONS[emacs1]'
    fi
}


#
# Actions
#

__accu_std_action_emacs1() {
    local id="$1" ts="$2" cmd="$3" active_path="$4" file="$5"
    zaccu_stdlib_to_cmd_line "cd $active_path; $cmd $file"
}

__accu_action_cd_emacs1() {
    local id="$1" ts="$2" cmd="$3" active_path="$4" file="$5"
    zaccu_stdlib_to_cmd_line "cd $active_path"
}

__accu_action_backup_emacs1() {
    local id="$1" ts="$2" cmd="$3" active_path="$4" file="$5" dest="${ZACCU_CONFIG[emacs1_backupdir]}"

    # One day zaccu_stdlib_resolve_path might access files
    # on disk (still rather unlikely), so we give it unquoted
    # paths and quote its output
    zaccu_stdlib_resolve_path "${(Q)active_path}" "${(Q)file}"
    local dir="${(q)reply[1]}" file="${(q)reply[2]}"

    zaccu_stdlib_get_date_and_time_string
    zaccu_stdlib_to_cmd_line "mkdir -p $dest; cp $dir/$file $dest/${file}_$REPLY"
}

#
# Helper variables
#

# Detects if a path already occured
typeset -gA __accu_emacs1_path_occured

# Detects whether any content occured
integer -g __accu_emacs1_was_content

# Counts number of entries generated
integer -g __accu_emacs1_count

#
# Mark that the implementation is loaded
#

typeset -g __accu_emacs1_loaded=1

# vim: ft=zsh
