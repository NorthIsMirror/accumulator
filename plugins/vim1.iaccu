# Accumulator plugin for VIM. Commands like "vim ~/.zshrc" are
# routed to specified generator function. The generator creates
# text with hyperlinks and appends the text to $SECTIONNAME of
# choice in ZACCU_OUTPUT_DOCUMENT_SECTIONS[$SECTIONNAME] (global
# hash). Initial and final generators manage header text.

# Plugin functions are run from "accumulator" function, which has
# emulate -LR zsh, setopt extendedglob. Other code is executed
# in unknown environment

# This is implementation file - there's no registration here

#
# Initial generator
#

# No arguments
accu_initial_generator_vim1() {
    ZACCU_OUTPUT_DOCUMENT_SECTIONS[vim1]="${ACC_GREEN}Vim last opened documents:${ACC_GREEN_E}"$'\n'
    accu_vim1_was_content=0

    #
    # Read configuration
    #

    # Size

    local size
    zstyle -s ":accumulator:vim1" size size || size="20"

    # We run from accumulator, extendedglob is set
    # <-> is: positive number, including 0
    [[ "$size" != <-> ]] && size="20"

    ZACCU_CONFIG[vim1_size]="$size"

    # Backup dir

    local backup_dir
    zstyle -s ":accumulator:vim1" backup_dir backup_dir || backup_dir="~/.vbackup"
    ZACCU_CONFIG[vim1_backupdir]="$backup_dir"
}


#
# Generator
#

# $1 - present working directory
# $2 - it's "vim" or "gvim", the command that's invoked
# $3, $4, ... - arguments passed to vim
accu_generator_vim1() {
    local active_path="$1"
    local cmd="$2"
    local -a args
    shift 2
    args=( "$@" )

    integer max_entries="${ZACCU_CONFIG[vim1_size]}"

    local a
    for a in "${args[@]}"; do
        # Skip options
        [[ "$a" = -[[:alnum:]]# ]] && continue

        if [ "$accu_vim1_path_occured[$a]" != "1" ]; then
            accu_vim1_was_content=1
            accu_vim1_path_occured[$a]="1"

            # Configurable limit on number of entries in the section
            [[ "$accu_vim1_count" -ge "$max_entries" ]] && break
            accu_vim1_count=accu_vim1_count+1

            zaccu_stdlib_resolve_path "$active_path" "$a"
            local dir="${reply[1]}" file="${reply[2]}"

            # Truncate to 30 characters, right-pad to 35 characters
            file='%30<...<'"$file"
            file="$ACC_YELLOW${(%)file}$ACC_YELLOW_E"
            file="${(r:35:: :)file}"

            reply=()

            # ID, data1, data2, data3, data4, text, handler
            zaccu_get_std_button "vim1" 0 "$cmd" "$active_path" "$a" "$file" accu_std_action_vim1

            # ID, data1, data2, data3, data4, text, handler
            zaccu_get_button "vim1A" 0 "$cmd" "$active_path" "$a" "CD" accu_action_cd_vim1

            # ID, data1, data2, data3, data4, text, handler
            zaccu_get_button "vim1B" 0 "$cmd" "$active_path" "$a" "Backup" accu_action_backup_vim1

            ZACCU_OUTPUT_DOCUMENT_SECTIONS[vim1]+=$'\t'"$reply[1] ${reply[2]} ${reply[3]}"$'\n'
        fi
    done
}


#
# Final generator
#

accu_final_generator_vim1() {
    accu_vim1_path_occured=()
    accu_vim1_count=0

    # No content -> remove header
    if (( accu_vim1_was_content == 0 )); then
        unset 'ZACCU_OUTPUT_DOCUMENT_SECTIONS[vim1]'
    fi
}


#
# Actions
#

accu_std_action_vim1() {
    local id="$1" ts="$2" cmd="$3" active_path="$4" file="$5"
    zaccu_stdlib_to_cmd_line "cd $active_path; $cmd $file"
}

accu_action_cd_vim1() {
    local id="$1" ts="$2" cmd="$3" active_path="$4" file="$5"
    zaccu_stdlib_to_cmd_line "cd $active_path"
}

accu_action_backup_vim1() {
    local id="$1" ts="$2" cmd="$3" active_path="$4" file="$5" dest="${ZACCU_CONFIG[vim1_backupdir]}"

    zaccu_stdlib_resolve_path "$active_path" "$file"
    local dir="${reply[1]}" file="${reply[2]}"

    zaccu_stdlib_get_date_and_time_string
    zaccu_stdlib_to_cmd_line "mkdir -p $dest; cp $dir/$file $dest/${file}_$REPLY"
}

#
# Helper variables
#

# Detects if a path already occured
typeset -gA accu_vim1_path_occured

# Detects whether any content occured
integer -g accu_vim1_was_content

# Counts number of entries generated
integer -g accu_vim1_count

#
# Mark that the implementation is loaded
#

typeset -g accu_vim1_loaded=1

# vim: ft=zsh
