#
# Started from zle
#

emulate -LR zsh
setopt extendedglob typesetsilent

autoload zaccu-process-buffer zaccu-usetty-wrapper zaccu-list zaccu-list-input zaccu-list-draw

##
## Functions
##

#
# Runs initial generators of all loaded plugins.
# The generators will typically add their header
# texts into ZACCU_OUTPUT_DOCUMENT_SECTIONS
#
function -zaccu_run_initial_generators() {
    local g
    for g in ${(v)ZACCU_PLUGS_INITIAL_TEXT_GENERATORS[@]}; do
        "$g"
    done
}

#
# Runs generator for given command ($2) and its
# arguments ($3, $4, ...). The generator ran will
# build ZACCU_OUTPUT_DOCUMENT_SECTIONS sections,
# i.e. entries of the hash, which are text, with
# hyperlinks.
#
# Requested and used is also $1 - $PWD at the time
# when the command is being run
#
function -zaccu_run_generator() {
    local active_path="$1" cmd="$2"
    if [[ -n "$cmd" && -n "${ZACCU_PLUGS_TEXT_GENERATORS[$cmd]}" ]]; then
        local -a plugins
        plugins=( "${(@z)ZACCU_PLUGS_TEXT_GENERATORS[$cmd]}" )

        local p
        for p in "${plugins[@]}"; do
            "$p" "$@"
        done
    fi
}

#
# Runs final generators of all loaded plugins.
# The generators will typically remove section's
# header if there was no content, or e.g. create
# actual ZACCU_OUTPUT_DOCUMENT_SECTIONS section
# from data constructed in generators
#
function -zaccu_run_final_generators() {
    local g
    for g in ${(v)ZACCU_PLUGS_FINAL_TEXT_GENERATORS[@]}; do
        "$g"
    done
}

#
# Loads implementation of given plugin - if it's
# not already loaded. Testable, one can check
# if something actually loaded
#
# So, a *function* sources file - this has its
# implications about default scope during load
#
# $1 - plugin name
#
function -zaccu_load_implementation() {
    local var_name="accu_${1}_loaded"
    # Already loaded?
    [ "${(P)var_name}" = "1" ] && return 1

    # Load
    source "$ZACCU_REPO_DIR/plugins/${1}.iaccu"
    return 0
}

##
## Main code
##

local curcontext=":zle:$WIDGET"
local MATCH MBEGIN MEND
local input_db_path="$HOME/.config/accumulator/data/input.db"
local -a input_arr

# Load all plugin implementations
local impl
for impl in "$ZACCU_REPO_DIR"/plugins/*.iaccu; do
    -zaccu_load_implementation "${${impl%.iaccu}:t}"
done

# Plugins use this hash to provide content for the output document
typeset -gA ZACCU_OUTPUT_DOCUMENT_SECTIONS
ZACCU_OUTPUT_DOCUMENT_SECTIONS=()

-zaccu_run_initial_generators

input_arr=( "${(f)$(<"${input_db_path}")}" )

# TODO: detect active path modification inside one command set
for entry in "${input_arr[@]}"; do
    local -a data_pack active_path copy_of_input
    data_pack=( "${(@z)entry}" )
    active_path="${(Q)data_pack[1]}"
    copy_of_input="${(Q)data_pack[2]}"

    local -a command_set=( "${(@z)copy_of_input}" )
    # Select last command in the input
    integer selected_idx=1 last_idx=1 i size="${#command_set}"
    local cmd=""
    for (( i=1; i<=size; i++ )); do
        # Look for start of command
        if [ "$cmd" = "" ]; then
            cmd="${command_set[i]}"
            selected_idx=i
        fi

        # Look for end of command
        if [ "$command_set[i]" = ";" ]; then
            last_idx=i-1

            -zaccu_run_generator "$active_path" "${(@)command_set[$selected_idx,$last_idx]}"

            cmd=""
            selected_idx=0
            last_idx=0
        fi
    done

    # Last command, without ";" at the end of it
    if [[ "$selected_idx" -ne "0" ]]; then
        -zaccu_run_generator "$active_path" "${(@)command_set[$selected_idx,-1]}"
    fi
done

-zaccu_run_final_generators

local k text=""
local -a splitted
integer nonselectable_idx=1
ZACCULIST_NONSELECTABLE_ELEMENTS=()
for k in vim1; do
    ZACCULIST_NONSELECTABLE_ELEMENTS+=( "$nonselectable_idx" )
    text+="${ZACCU_OUTPUT_DOCUMENT_SECTIONS[$k]}"
    splitted=( "${(f)ZACCU_OUTPUT_DOCUMENT_SECTIONS[$k]}" )
    nonselectable_idx+="${#splitted}"
done

# Jumping over headers with [ and ]
ZACCULIST_HOP_INDEXES=( "${ZACCULIST_NONSELECTABLE_ELEMENTS[@]}" )

local ZACCULIST_WRAPPER_BIT=""
zaccu-usetty-wrapper zaccu-list-wrapper "${(@f)${text%$'\n'}}"

zle && zle redisplay

if [ -z "$ZACCULIST_WRAPPER_BIT" ]; then
    return 1
fi

if [ -z "$BUFFER" ]; then
    # ID, data1, data2, data3
    if zaccu_stdlib_decode_hyperlink "$ZACCULIST_WRAPPER_BIT"; then
        local id="${reply[1]}" ts="${reply[2]}" active_path="${reply[3]}" file="${reply[4]}"
        if [ -n "${ZACCU_PLUGS_ACTION_IDS_TO_HANDLERS[$id]}" ]; then
            # Call the handled with all hyper-link data
            "${ZACCU_PLUGS_ACTION_IDS_TO_HANDLERS[$id]}" "$id" "$ts" "$active_path" "$file"
        fi
    fi
else
    # If BUFFER isn't empty, we will replace active
    # word under cursor (or just insert when not at
    # word) with selected entity

    # Process current buffer
    local ZACCU_PB_WORDS="" ZACCU_PB_WORDS_BEGINNINGS="" ZACCU_PB_SPACES=""
    local ZACCU_PB_SELECTED_WORD="" ZACCU_PB_LEFT="" ZACCU_PB_RIGHT=""
    zaccu-process-buffer "$BUFFER"

    #
    # Rebuilding buffer
    #

    integer pos="$CURSOR"
    integer size="${#ZACCU_PB_WORDS}"
    integer newcursor
    buf=""

    zle kill-buffer

    integer i j
    for (( i=1; i<=size; i++ )); do
        # Check if we're at (i.e. directly at or after,
        # when after are just spaces) current word
        if [ "$i" = "$ZACCU_PB_SELECTED_WORD" ]; then
            # Check if we're at the word itself,
            # or at some distance after it
            if (( pos > (ZACCU_PB_WORDS_BEGINNINGS[i] + ${#ZACCU_PB_WORDS[i]} - 1) )); then
                # We need to introduce new word
                # First move all words and spaces forward
                for (( j=size; j>=i+1; j-- )); do
                    ZACCU_PB_WORDS[j+1]="${ZACCU_PB_WORDS[j]}"
                    ZACCU_PB_SPACES[j+1]="${ZACCU_PB_SPACES[j]}"
                    ZACCU_PB_WORDS_BEGINNINGS[j+1]="${ZACCU_PB_WORDS_BEGINNINGS[j]}"
                done
                size+=1

                # New word is introduced at position i+1, after current word
                # It doesn't have word beginnings and spaces assigned
                # It has to take spaces from word next to it, i+2
                ZACCU_PB_WORDS[i+1]="$ZACCULIST_WRAPPER_BIT"
                ZACCU_PB_WORDS_BEGINNINGS[i+1]="$(( pos + 1 ))"

                # Now split spaces
                # cursor_spaces: spaces from current word to the cursor
                integer cursor_spaces=$(( pos - ZACCU_PB_WORDS_BEGINNINGS[i] - ${#ZACCU_PB_WORDS[i]} + 1 ))
                # take that from spaces of word "next" in: current NEW next
                integer after_spaces=$(( ZACCU_PB_SPACES[i+2] - cursor_spaces ))
                local empty=""
                ZACCU_PB_SPACES[i+1]="${(l:cursor_spaces:: :)empty}"
                ZACCU_PB_SPACES[i+2]="${(l:after_spaces:: :)empty}"

                # Cursor will be at end of newly added word
                newcursor=$(( ZACCU_PB_WORDS_BEGINNINGS[i+1] + ${#ZACCU_PB_WORDS[i+1]} - 1 ))

            else
                ZACCU_PB_WORDS[i]="$ZACCULIST_WRAPPER_BIT"

                # Cursor will be at end of newly substituted word
                newcursor=$(( ZACCU_PB_WORDS_BEGINNINGS[i] + ${#ZACCU_PB_WORDS[i]} - 1 ))

                # Update word beginnings of following words – skipped
            fi
        fi
        buf+="$ZACCU_PB_SPACES[i]$ZACCU_PB_WORDS[i]"
    done

    # Append final white spaces
    buf+="$ZACCU_PB_SPACES[i]"
    BUFFER="$buf"
    CURSOR="$newcursor"

    zle redisplay
fi

return 0

# vim:ft=zsh
